const winston = require('winston');
const SiteIntelligence = require('./src/intelligence/SiteIntelligence');

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.printf(({ timestamp, level, message }) => {
      return `${timestamp} [${level.toUpperCase()}]: ${message}`;
    })
  ),
  transports: [
    new winston.transports.Console()
  ]
});

async function testSiteIntelligence() {
  console.log('üß† Testing Comprehensive Site Intelligence System\n');
  
  const siteIntelligence = new SiteIntelligence(logger);
  
  try {
    await siteIntelligence.initialize();
    console.log('‚úÖ Site Intelligence system initialized\n');
    
    const testUrl = 'https://glasswingshop.com/';
    console.log(`üéØ Building intelligence for: ${testUrl}`);
    console.log('This will:\n' +
                '  üìç Map navigation structure with CSS selectors\n' +
                '  üîÑ Launch concurrent browsers to explore sections\n' +
                '  üìä Extract product data and working selectors\n' +
                '  üß† Build comprehensive world model\n');
    
    const startTime = Date.now();
    const intelligence = await siteIntelligence.buildComprehensiveSiteIntelligence(testUrl, {
      maxConcurrent: 3, // Use 3 concurrent browsers
      forceRefresh: true // Force fresh exploration
    });
    
    const duration = Date.now() - startTime;
    
    console.log('\nüéâ SITE INTELLIGENCE RESULTS');
    console.log('================================');
    
    console.log('\nüìç NAVIGATION INTELLIGENCE:');
    console.log(`  ‚Ä¢ Main Sections: ${intelligence.navigation.main_sections}`);
    console.log(`  ‚Ä¢ Dropdown Menus: ${intelligence.navigation.dropdown_menus}`);
    console.log(`  ‚Ä¢ Sidebar Navigation: ${intelligence.navigation.sidebar_navigation}`);
    console.log(`  ‚Ä¢ Clickable Elements: ${intelligence.navigation.clickable_elements}`);
    
    console.log('\nüîç EXPLORATION RESULTS:');
    console.log(`  ‚Ä¢ Sections Explored: ${intelligence.exploration.sections_explored}`);
    console.log(`  ‚Ä¢ Products Found: ${intelligence.exploration.total_products_found}`);
    console.log(`  ‚Ä¢ Page Types: ${intelligence.exploration.page_types_discovered.join(', ')}`);
    console.log(`  ‚Ä¢ Working Selectors: ${intelligence.exploration.working_selectors.length}`);
    
    console.log('\n‚öôÔ∏è  SELECTOR LIBRARY:');
    console.log(`  ‚Ä¢ Categories: ${intelligence.selectors.categories.join(', ')}`);
    console.log(`  ‚Ä¢ Success Rate: ${Math.round(intelligence.selectors.success_rate * 100)}%`);
    console.log(`  ‚Ä¢ Library Size: ${intelligence.selectors.library_size} selector types`);
    
    console.log('\nüåê URL PATTERNS:');
    console.log(`  ‚Ä¢ Product URLs: ${intelligence.url_patterns.product_url || 'Not detected'}`);
    console.log(`  ‚Ä¢ Category URLs: ${intelligence.url_patterns.category_url || 'Not detected'}`);
    console.log(`  ‚Ä¢ Collection URLs: ${intelligence.url_patterns.collection_url || 'Not detected'}`);
    
    console.log('\nüéØ SITE CAPABILITIES:');
    const caps = intelligence.capabilities;
    console.log(`  ‚Ä¢ Navigate Categories: ${caps.can_navigate_categories ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚Ä¢ Extract Products: ${caps.can_extract_products ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚Ä¢ Extract Prices: ${caps.can_extract_prices ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚Ä¢ Handle Variants: ${caps.can_handle_variants ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚Ä¢ Check Availability: ${caps.can_check_availability ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚Ä¢ Use Filters: ${caps.can_use_filters ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚Ä¢ Handle Pagination: ${caps.can_handle_pagination ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚Ä¢ Search Support: ${caps.supports_search ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚Ä¢ Overall Score: ${Math.round(caps.overall_score * 100)}%`);
    
    console.log('\nüìä SUMMARY:');
    console.log(`  ‚Ä¢ Intelligence Score: ${intelligence.summary.intelligence_score}/100`);
    console.log(`  ‚Ä¢ Processing Time: ${Math.round(duration/1000)}s`);
    console.log(`  ‚Ä¢ Domain: ${intelligence.domain}`);
    
    console.log('\nüîç TESTING QUICK PRICE CHECK...');
    // Test quick price check if we found any products
    if (intelligence.exploration.total_products_found > 0) {
      try {
        const testProductUrl = 'https://glasswingshop.com/products/test-product'; // Example URL
        console.log('Note: Quick price check would work with actual product URLs from the intelligence data');
      } catch (priceError) {
        console.log('Quick price check test skipped (no sample product URL available)');
      }
    }
    
    console.log('\n‚úÖ Site Intelligence test completed successfully!');
    console.log(`üéØ Ready to generate rich training data and provide real-time price checking for ${intelligence.domain}`);
    
  } catch (error) {
    console.error('‚ùå Site Intelligence test failed:', error.message);
    console.error(error.stack);
  } finally {
    await siteIntelligence.close();
  }
}

if (require.main === module) {
  testSiteIntelligence().catch(console.error);
}